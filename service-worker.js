{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "calendar-alt"
  },
  "name" : "Pracuj",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ always-run-in-app: true; icon-color: pink;\n\/\/ icon-glyph: calendar-alt; share-sheet-inputs: url, file-url, plain-text, image;\n\n\/\/ PracujApp - Všestranný docházkový systém\n\n\/\/ ============ KONSTANTY A NASTAVENÍ ============\nconst HOURLY_RATE = 400\nconst DEDUCTION_RATE = 0.5\nconst LOCATIONS = [\"Podolí\", \"Na Marně\", \"Českomalinská\"]\nconst ACTIVITIES = [\"Práce na vilách\", \"Příprava vily\", \"Wellness\", \"Komunikace\", \"Prádelna\", \"Opravy\", \"Technické záležitosti\"]\n\n\/\/ Cesty k souborům\nconst fm = FileManager.iCloud()\nconst BASE_DIR = fm.documentsDirectory()\nconst DATA_FILE = fm.joinPath(BASE_DIR, \"pracuj_data.json\")\nconst STATE_FILE = fm.joinPath(BASE_DIR, \"pracuj_state.json\")\nconst STATS_FILE = fm.joinPath(BASE_DIR, \"pracuj_stats.json\")\n\n\/\/ ============ POMOCNÉ FUNKCE ============\nfunction loadState() {\n  if (fm.fileExists(STATE_FILE)) {\n    return JSON.parse(fm.readString(STATE_FILE))\n  }\n  return { status: \"idle\", current_session: null }\n}\n\nfunction saveState(state) {\n  fm.writeString(STATE_FILE, JSON.stringify(state))\n}\n\nfunction loadData() {\n  if (fm.fileExists(DATA_FILE)) {\n    return JSON.parse(fm.readString(DATA_FILE))\n  }\n  return { sessions: [] }\n}\n\nfunction saveData(data) {\n  fm.writeString(DATA_FILE, JSON.stringify(data))\n}\n\nfunction loadStats() {\n  if (fm.fileExists(STATS_FILE)) {\n    return JSON.parse(fm.readString(STATS_FILE))\n  }\n  return {\n    daily: {},\n    weekly: {},\n    monthly: {},\n    total: { duration: 0, earnings: 0 }\n  }\n}\n\nfunction saveStats(stats) {\n  fm.writeString(STATS_FILE, JSON.stringify(stats))\n}\n\nfunction formatDuration(seconds) {\n  const hours = Math.floor(seconds \/ 3600)\n  const minutes = Math.floor((seconds % 3600) \/ 60)\n  return `${hours}h ${minutes}m`\n}\n\nfunction calculateEarnings(durationSeconds) {\n  const hours = durationSeconds \/ 3600\n  const gross = hours * HOURLY_RATE\n  const deduction = gross * DEDUCTION_RATE\n  const net = gross - deduction\n  return { gross, deduction, net }\n}\n\nfunction getDateKey() {\n  const now = new Date()\n  return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`\n}\n\nfunction getWeekKey() {\n  const now = new Date()\n  const startOfYear = new Date(now.getFullYear(), 0, 1)\n  const days = Math.floor((now - startOfYear) \/ (24 * 60 * 60 * 1000))\n  const weekNumber = Math.ceil((days + startOfYear.getDay() + 1) \/ 7)\n  return `${now.getFullYear()}-W${weekNumber.toString().padStart(2, '0')}`\n}\n\nfunction getMonthKey() {\n  const now = new Date()\n  return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}`\n}\n\nfunction updateStats(duration, earnings) {\n  const stats = loadStats()\n  const dateKey = getDateKey()\n  const weekKey = getWeekKey()\n  const monthKey = getMonthKey()\n  \n  \/\/ Denní statistiky\n  if (!stats.daily[dateKey]) {\n    stats.daily[dateKey] = { duration: 0, earnings: 0 }\n  }\n  stats.daily[dateKey].duration += duration\n  stats.daily[dateKey].earnings += earnings\n  \n  \/\/ Týdenní statistiky\n  if (!stats.weekly[weekKey]) {\n    stats.weekly[weekKey] = { duration: 0, earnings: 0 }\n  }\n  stats.weekly[weekKey].duration += duration\n  stats.weekly[weekKey].earnings += earnings\n  \n  \/\/ Měsíční statistiky\n  if (!stats.monthly[monthKey]) {\n    stats.monthly[monthKey] = { duration: 0, earnings: 0 }\n  }\n  stats.monthly[monthKey].duration += duration\n  stats.monthly[monthKey].earnings += earnings\n  \n  \/\/ Celkové statistiky\n  stats.total.duration += duration\n  stats.total.earnings += earnings\n  \n  saveStats(stats)\n  return stats\n}\n\n\/\/ ============ FUNKCE PRO OVLÁDÁNÍ PRÁCE ============\nasync function startWork(location, activity) {\n  const state = loadState()\n  \n  if (state.status === \"working\") {\n    return { success: false, message: \"Již pracuješ. Máš aktivní pracovní relaci.\" }\n  }\n  \n  if (!location || !activity) {\n    \/\/ Výběr přímo v Scriptable\n    if (!location) {\n      const locAlert = new Alert()\n      locAlert.title = \"Vyber lokalitu\"\n      for (const loc of LOCATIONS) {\n        locAlert.addAction(loc)\n      }\n      const locIndex = await locAlert.present()\n      location = LOCATIONS[locIndex]\n    }\n    \n    if (!activity) {\n      const actAlert = new Alert()\n      actAlert.title = \"Vyber činnost\"\n      for (const act of ACTIVITIES) {\n        actAlert.addAction(act)\n      }\n      const actIndex = await actAlert.present()\n      activity = ACTIVITIES[actIndex]\n    }\n  }\n  \n  const session = {\n    id: Date.now(),\n    location: location,\n    activity: activity,\n    start_time: Date.now() \/ 1000,\n    pauses: [],\n    total_pause_time: 0,\n    end_time: null,\n    duration: 0,\n    gross_earnings: 0,\n    deduction: 0,\n    net_earnings: 0\n  }\n  \n  state.status = \"working\"\n  state.current_session = session\n  saveState(state)\n  \n  return { \n    success: true, \n    message: `Práce zahájena\\nLokalita: ${location}\\nČinnost: ${activity}` \n  }\n}\n\nfunction pauseWork() {\n  const state = loadState()\n  \n  if (state.status !== \"working\") {\n    return { \n      success: false, \n      message: \"Nepracuješ. Nemáš aktivní pracovní relaci.\" \n    }\n  }\n  \n  state.status = \"paused\"\n  const pauseStart = Date.now() \/ 1000\n  state.current_session.pauses.push({ start: pauseStart, end: null })\n  saveState(state)\n  \n  return { \n    success: true, \n    message: \"Práce pozastavena. Časovač byl pozastaven.\" \n  }\n}\n\nfunction resumeWork() {\n  const state = loadState()\n  \n  if (state.status !== \"paused\") {\n    return { \n      success: false, \n      message: \"Není pozastaveno. Práce není pozastavena.\" \n    }\n  }\n  \n  state.status = \"working\"\n  const pauseEnd = Date.now() \/ 1000\n  \n  const lastPause = state.current_session.pauses[state.current_session.pauses.length - 1]\n  lastPause.end = pauseEnd\n  const pauseDuration = pauseEnd - lastPause.start\n  state.current_session.total_pause_time += pauseDuration\n  saveState(state)\n  \n  return { \n    success: true, \n    message: \"Práce obnovena. Časovač byl obnoven.\" \n  }\n}\n\nfunction stopWork() {\n  let state = loadState()\n  \n  if (state.status === \"idle\") {\n    return { \n      success: false, \n      message: \"Nepracuješ. Nemáš aktivní pracovní relaci.\" \n    }\n  }\n  \n  if (state.status === \"paused\") {\n    resumeWork()\n    state = loadState()\n  }\n  \n  const endTime = Date.now() \/ 1000\n  const session = state.current_session\n  session.end_time = endTime\n  \n  const totalTime = endTime - session.start_time\n  const actualWorkTime = totalTime - session.total_pause_time\n  session.duration = actualWorkTime\n  \n  const earnings = calculateEarnings(actualWorkTime)\n  session.gross_earnings = earnings.gross\n  session.deduction = earnings.deduction\n  session.net_earnings = earnings.net\n  \n  \/\/ Aktualizace statistik\n  updateStats(actualWorkTime, earnings.net)\n  \n  state.status = \"idle\"\n  state.current_session = null\n  saveState(state)\n  \n  const data = loadData()\n  data.sessions.push(session)\n  saveData(data)\n  \n  const message = `Doba trvání: ${formatDuration(actualWorkTime)}\\n` +\n                 `Hrubý výdělek: ${earnings.gross.toFixed(2)} Kč\\n` +\n                 `Srážka (50%): ${earnings.deduction.toFixed(2)} Kč\\n` +\n                 `Čistý výdělek: ${earnings.net.toFixed(2)} Kč`\n  \n  return { \n    success: true, \n    message: \"Práce dokončena\\n\" + message \n  }\n}\n\nfunction getStatus() {\n  const state = loadState()\n  \n  if (state.status === \"idle\") {\n    return { \n      success: true, \n      message: \"Stav: Nepracuješ\" \n    }\n  }\n  \n  const session = state.current_session\n  const currentTime = Date.now() \/ 1000\n  \n  let elapsed\n  let statusText\n  if (state.status === \"working\") {\n    elapsed = currentTime - session.start_time - session.total_pause_time\n    statusText = \"Pracuješ\"\n  } else {\n    elapsed = currentTime - session.start_time - session.total_pause_time\n    statusText = \"Pozastaveno\"\n  }\n  \n  const earnings = calculateEarnings(elapsed)\n  \n  const message = `Stav: ${statusText}\\n` +\n                 `Lokalita: ${session.location}\\n` +\n                 `Činnost: ${session.activity}\\n` +\n                 `Doba trvání: ${formatDuration(elapsed)}\\n` +\n                 `Aktuální výdělek: ${earnings.net.toFixed(2)} Kč`\n  \n  return { \n    success: true, \n    message: message,\n    status: state.status,\n    location: session.location,\n    activity: session.activity,\n    duration: elapsed,\n    earnings: earnings.net\n  }\n}\n\nfunction getStatsSummary() {\n  const stats = loadStats()\n  const dateKey = getDateKey()\n  const weekKey = getWeekKey()\n  const monthKey = getMonthKey()\n  \n  const dailyStats = stats.daily[dateKey] || { duration: 0, earnings: 0 }\n  const weeklyStats = stats.weekly[weekKey] || { duration: 0, earnings: 0 }\n  const monthlyStats = stats.monthly[monthKey] || { duration: 0, earnings: 0 }\n  \n  const message = `Dnešní statistiky:\\n` +\n                 `Odpracováno: ${formatDuration(dailyStats.duration)}\\n` +\n                 `Vyděláno: ${dailyStats.earnings.toFixed(2)} Kč\\n\\n` +\n                 `Tento týden:\\n` +\n                 `Odpracováno: ${formatDuration(weeklyStats.duration)}\\n` +\n                 `Vyděláno: ${weeklyStats.earnings.toFixed(2)} Kč\\n\\n` +\n                 `Tento měsíc:\\n` +\n                 `Odpracováno: ${formatDuration(monthlyStats.duration)}\\n` +\n                 `Vyděláno: ${monthlyStats.earnings.toFixed(2)} Kč\\n\\n` +\n                 `Celkem:\\n` +\n                 `Odpracováno: ${formatDuration(stats.total.duration)}\\n` +\n                 `Vyděláno: ${stats.total.earnings.toFixed(2)} Kč`\n  \n  return { \n    success: true, \n    message: message,\n    daily: dailyStats,\n    weekly: weeklyStats,\n    monthly: monthlyStats,\n    total: stats.total\n  }\n}\n\n\/\/ ============ FUNKCE PRO VYTVÁŘENÍ WIDGETŮ ============\n\n\/\/ Funkce pro vytvoření stavového widgetu\nasync function createStatusWidget() {\n  const widgetEl = new ListWidget()\n  widgetEl.backgroundColor = new Color(\"#1E1E1E\")\n  \n  const status = getStatus()\n  \n  const header = widgetEl.addText(\"⏱️ Pracuj\")\n  header.font = Font.boldSystemFont(16)\n  header.textColor = Color.white()\n  \n  widgetEl.addSpacer(4)\n  \n  if (status.success && status.status !== \"idle\") {\n    \/\/ Zobrazujeme aktivní práci\n    if (status.status === \"working\") {\n      widgetEl.backgroundColor = new Color(\"#2F6D73\")\n      const statusLine = widgetEl.addText(\"Pracuješ:\")\n      statusLine.font = Font.systemFont(14)\n      statusLine.textColor = Color.white()\n    } else {\n      widgetEl.backgroundColor = new Color(\"#785323\")\n      const statusLine = widgetEl.addText(\"⏸️ Pozastaveno:\")\n      statusLine.font = Font.systemFont(14)\n      statusLine.textColor = Color.white()\n    }\n    \n    widgetEl.addSpacer(4)\n    \n    const activity = widgetEl.addText(status.activity)\n    activity.font = Font.boldSystemFont(14)\n    activity.textColor = Color.white()\n    \n    widgetEl.addSpacer(4)\n    \n    const detail = widgetEl.addText(`${status.location} • ${formatDuration(status.duration)}`)\n    detail.font = Font.systemFont(12)\n    detail.textColor = Color.white()\n    \n    widgetEl.addSpacer(4)\n    \n    const earningsText = widgetEl.addText(`${Math.round(status.earnings)} Kč`)\n    earningsText.font = Font.boldSystemFont(14)\n    earningsText.textColor = Color.white()\n  } else {\n    \/\/ Nepracujeme\n    widgetEl.backgroundColor = new Color(\"#941C2F\")\n    const statusLine = widgetEl.addText(\"Nepracuješ\")\n    statusLine.font = Font.systemFont(14)\n    statusLine.textColor = Color.white()\n    \n    \/\/ Přidáme statistiky\n    const stats = getStatsSummary()\n    if (stats.success) {\n      widgetEl.addSpacer(8)\n      \n      const dailyLabel = widgetEl.addText(\"Dnes:\")\n      dailyLabel.font = Font.systemFont(10)\n      dailyLabel.textColor = Color.white()\n      \n      const dailyStats = widgetEl.addText(`${formatDuration(stats.daily.duration)} • ${Math.round(stats.daily.earnings)} Kč`)\n      dailyStats.font = Font.systemFont(12)\n      dailyStats.textColor = Color.white()\n    }\n  }\n  \n  widgetEl.url = \"scriptable:\/\/\/run\/Pracuj\"\n  return widgetEl\n}\n\n\/\/ Funkce pro vytvoření akčních widgetů (start, stop, pauza, pokračovat)\nfunction createActionWidget(title, sfSymbol, color, scriptUrl) {\n  const widgetEl = new ListWidget()\n  widgetEl.backgroundColor = new Color(color)\n  \n  widgetEl.addSpacer()\n  \n  const stack = widgetEl.addStack()\n  stack.centerAlignContent()\n  stack.layoutVertically()\n  \n  const symbolImage = SFSymbol.named(sfSymbol).image\n  const symbolText = stack.addImage(symbolImage)\n  symbolText.imageSize = new Size(30, 30)\n  symbolText.tintColor = Color.white()\n  \n  stack.addSpacer(8)\n  \n  const titleText = stack.addText(title)\n  titleText.centerAlignText()\n  titleText.font = Font.boldSystemFont(16)\n  titleText.textColor = Color.white()\n  \n  widgetEl.addSpacer()\n  widgetEl.url = scriptUrl\n  \n  return widgetEl\n}\n\n\/\/ Funkce pro vytvoření statistického widgetu\nfunction createStatsWidget() {\n  const widgetEl = new ListWidget()\n  widgetEl.backgroundColor = new Color(\"#3D348B\")\n  \n  const header = widgetEl.addText(\"📊 Statistiky\")\n  header.font = Font.boldSystemFont(16)\n  header.textColor = Color.white()\n  \n  widgetEl.addSpacer(4)\n  \n  const stats = getStatsSummary()\n  if (stats.success) {\n    const dailyHeader = widgetEl.addText(\"Dnes:\")\n    dailyHeader.font = Font.boldSystemFont(12)\n    dailyHeader.textColor = Color.white()\n    \n    const daily = widgetEl.addText(`${formatDuration(stats.daily.duration)} • ${Math.round(stats.daily.earnings)} Kč`)\n    daily.font = Font.systemFont(12)\n    daily.textColor = Color.white()\n    \n    widgetEl.addSpacer(4)\n    \n    const weeklyHeader = widgetEl.addText(\"Tento týden:\")\n    weeklyHeader.font = Font.boldSystemFont(12)\n    weeklyHeader.textColor = Color.white()\n    \n    const weekly = widgetEl.addText(`${formatDuration(stats.weekly.duration)} • ${Math.round(stats.weekly.earnings)} Kč`)\n    weekly.font = Font.systemFont(12)\n    weekly.textColor = Color.white()\n    \n    widgetEl.addSpacer(4)\n    \n    const monthlyHeader = widgetEl.addText(\"Tento měsíc:\")\n    monthlyHeader.font = Font.boldSystemFont(12)\n    monthlyHeader.textColor = Color.white()\n    \n    const monthly = widgetEl.addText(`${formatDuration(stats.monthly.duration)} • ${Math.round(stats.monthly.earnings)} Kč`)\n    monthly.font = Font.systemFont(12)\n    monthly.textColor = Color.white()\n  }\n  \n  widgetEl.url = \"scriptable:\/\/\/run\/Pracuj?stats\"\n  return widgetEl\n}\n\n\/\/ ============ HLAVNÍ LOGIKA PRO SPUŠTĚNÍ SKRIPTU ============\nasync function runAsApp() {\n  const alert = new Alert()\n  alert.title = \"Docházkový systém\"\n  alert.addAction(\"Start\")\n  alert.addAction(\"Pauza\")\n  alert.addAction(\"Pokračovat\")\n  alert.addAction(\"Stop\")\n  alert.addAction(\"Status\")\n  alert.addAction(\"Statistiky\")\n  alert.addCancelAction(\"Zrušit\")\n  \n  const choice = await alert.presentAlert()\n  \n  let result\n  if (choice === 0) {\n    result = await startWork()\n  } else if (choice === 1) {\n    result = pauseWork()\n  } else if (choice === 2) {\n    result = resumeWork()\n  } else if (choice === 3) {\n    result = stopWork()\n  } else if (choice === 4) {\n    result = getStatus()\n  } else if (choice === 5) {\n    result = getStatsSummary()\n  } else {\n    return\n  }\n  \n  if (result) {\n    const resultAlert = new Alert()\n    resultAlert.title = result.success ? \"Úspěch\" : \"Chyba\"\n    resultAlert.message = result.message\n    await resultAlert.present()\n  }\n}\n\nasync function runAsWidget() {\n  let widget\n  const widgetParameter = args.widgetParameter || \"status\"\n  \n  if (widgetParameter === \"status\") {\n    widget = await createStatusWidget()\n  } else if (widgetParameter === \"start\") {\n    widget = createActionWidget(\"Start\", \"play.fill\", \"#2F6D73\", \"scriptable:\/\/\/run\/Pracuj?start\")\n  } else if (widgetParameter === \"stop\") {\n    widget = createActionWidget(\"Stop\", \"stop.fill\", \"#941C2F\", \"scriptable:\/\/\/run\/Pracuj?stop\")\n  } else if (widgetParameter === \"pause\") {\n    widget = createActionWidget(\"Pauza\", \"pause.fill\", \"#785323\", \"scriptable:\/\/\/run\/Pracuj?pause\")\n  } else if (widgetParameter === \"resume\") {\n    widget = createActionWidget(\"Pokračovat\", \"play.fill\", \"#2F6D73\", \"scriptable:\/\/\/run\/Pracuj?resume\")\n  } else if (widgetParameter === \"stats\") {\n    widget = createStatsWidget()\n  }\n  \n  Script.setWidget(widget)\n}\n\nasync function handleCommandURL() {\n  const callback = args.url || \"\"\n  let result\n  \n  if (callback.includes(\"?start\")) {\n    const locAlert = new Alert()\n    locAlert.title = \"Vyber lokalitu\"\n    for (const loc of LOCATIONS) {\n      locAlert.addAction(loc)\n    }\n    const locIndex = await locAlert.present()\n    const location = LOCATIONS[locIndex]\n    \n    const actAlert = new Alert()\n    actAlert.title = \"Vyber činnost\"\n    for (const act of ACTIVITIES) {\n      actAlert.addAction(act)\n    }\n    const actIndex = await actAlert.present()\n    const activity = ACTIVITIES[actIndex]\n    \n    result = await startWork(location, activity)\n  } else if (callback.includes(\"?stop\")) {\n    result = stopWork()\n  } else if (callback.includes(\"?pause\")) {\n    result = pauseWork()\n  } else if (callback.includes(\"?resume\")) {\n    result = resumeWork()\n  } else if (callback.includes(\"?stats\")) {\n    result = getStatsSummary()\n  }\n  \n  if (result) {\n    const resultAlert = new Alert()\n    resultAlert.title = result.success ? \"Úspěch\" : \"Chyba\"\n    resultAlert.message = result.message\n    await resultAlert.present()\n  }\n}\n\n\/\/ Hlavní spouštěcí bod\nasync function main() {\n  \/\/ Zpracování v závislosti na kontextu spuštění\n  if (config.runsInWidget) {\n    await runAsWidget()\n  } else if (args.url) {\n    await handleCommandURL()\n  } else {\n    await runAsApp()\n  }\n  \n  Script.complete()\n}\n\nawait main()",
  "share_sheet_inputs" : [
    "url",
    "file-url",
    "plain-text",
    "image"
  ]
}